#!/usr/bin/env python
# coding: utf-8

# In[1]:


import glob
import numpy as np
import pandas as pd
import physig as ps
from scipy import signal
from matplotlib import pyplot as plt


# In[2]:


ID        = 'SERT1597'
files_dir = '/home/maspe/filer/SERT/' + ID + '/continuous/'
npys_dir  = '/home/maspe/filer/SERT/' + ID + '/npys/'
figs_dir  = '/home/maspe/filer/SERT/' + ID + '/figs/'

files = sorted(glob.glob(files_dir + '/*.continuous'))


# In[3]:


df = pd.read_excel(files_dir + 'canales.xlsx', sheet_name=0, header=None, names=["locs"])
channels_locations = np.array(df['locs'].tolist())


# In[6]:


df = pd.read_excel(files_dir + 'entradas.xlsx',
                   sheet_name=0, header=None, names=["locs"])
entrances_times = np.array(df['locs'].tolist(), dtype='int')
entrances_times = entrances_times * 30
n_epochs = len(entrances_times)
print(entrances_times)


# In[9]:


mPFC_indexes  = [i for i,x in enumerate(channels_locations) if x == 'mPFC_left']
NAC_indexes = [i for i,x in enumerate(channels_locations) if x == 'NAC_left']
BLA_indexes  = [i for i,x in enumerate(channels_locations) if x == 'BLA_left']
vHip_indexes  = [i for i,x in enumerate(channels_locations) if x == 'vHipp_left']

mPFC_nchannels = len(mPFC_indexes)
NAC_nchannels  = len(NAC_indexes)
BLA_nchannels  = len(BLA_indexes)
vHip_nchannels = len(vHip_indexes)


# In[10]:


channel = ps.loadContinuous(files[0])
fs      = channel['header']['sampleRate']
npoints = len(channel['data'])


# In[ ]:


# # Test the filter
# # Plot the frequency response for a few different orders.
# for order in [8, 9, 10]:
#     b, a = butter_bandpass(highcut, fs, order=order)
#     w, h = signal.freqz(b, a, worN=10000)
#     plt.plot((fs * 0.5 / np.pi) * w, abs(h), label="order = %d" % order)

# plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)],
#          '--', label='sqrt(0.5)')
# plt.xlabel('Frequency (Hz)')
# plt.ylabel('Gain')
# plt.xlim([0,500])
# plt.grid(True)
# plt.legend(loc='best')
# # plt.show()

# # plt.savefig("/home/maspe/filer/testFiles/figs/butter_gamma.png", dpi=150, format='png')


# In[11]:


# scipy.signal.butter(N, Wn, btype='low', analog=False, output='ba')
def butter_bandpass(highcut, fs, order=5):
    nyq  = 0.5 * fs
    high = highcut / nyq
    b, a = signal.butter(order, high)
    return b, a

highcut = 300.0

# Filter parameters
highcut = 300.0
N       = 9
b, a    = butter_bandpass(highcut, fs, order=N)

# Downsampling parameters: final resolution = 1000 Hz
final_fs  = 1000.0
ds_factor = fs // final_fs
n_samples = np.int(npoints / ds_factor)


# In[13]:


iteration = 0
for file in files:
    channel = ps.loadContinuous(file)

    data = channel['data']
    data = signal.filtfilt(b=b, a=a, x=channel['data'] - np.mean(channel['data']),
                           axis=-1, padtype='odd', padlen=None, method='pad', irlen=None)
    
    data = signal.resample(x=data, num=n_samples)

    
    if iteration == 0:
        data_matrix = np.empty((len(channels_locations), len(data)))       
#         data_matrix = np.empty((32, len(data)))       
    
    data_matrix[iteration, :] = data    
    iteration += 1

mPFC = data_matrix[mPFC_indexes, :] - np.median(data_matrix[mPFC_indexes, :], axis=0)
NAC  = data_matrix[NAC_indexes, :]  - np.median(data_matrix[NAC_indexes, :], axis=0)
BLA  = data_matrix[BLA_indexes, :]  - np.median(data_matrix[BLA_indexes, :], axis=0)
vHip = data_matrix[vHip_indexes, :] - np.median(data_matrix[vHip_indexes, :], axis=0)

# del [iteration, channel, data, data_matrix]   


# In[ ]:


np.save(mydir + 'mPFC', mPFC)
np.save(mydir + 'NAC', NAC)
np.save(mydir + 'BLA', BLA)
np.save(mydir + 'vHip', vHip)


# In[14]:


entrances_times = [686275, 695241, 712241, 716841, 722675, 729808, 737208, 742675, 752341, 814875, 893241, 909641, 921275, 929941, 931908, 975141, 1102175, 1108775, 1138541, 1238308]


secs = 3
# Cambiar sampleRate para spikes/LFP coherence!!!!
window = int(final_fs) * secs
# window = int(fs) * secs


# For mPFC
pre = []
post = []
mPFC_epochs = np.zeros((mPFC_nchannels, window * 2, n_epochs))

for channel in range(mPFC_nchannels):
    for epoch in range(n_epochs):
        mPFC_epochs[channel, :, epoch] = mPFC[channel, entrances_times[epoch] - window : entrances_times[epoch] + window]

        
# For NAC
pre = []
post = []
NAC_epochs = np.zeros((NAC_nchannels, window * 2, n_epochs))

for channel in range(NAC_nchannels):
    for epoch in range(n_epochs):
        NAC_epochs[channel, :, epoch] = NAC[channel, entrances_times[epoch] - window : entrances_times[epoch] + window]
        
        
# For BLA
pre = []
post = []
BLA_epochs = np.zeros((BLA_nchannels, window * 2, n_epochs))

for channel in range(BLA_nchannels):
    for epoch in range(n_epochs):
        BLA_epochs[channel, :, epoch] = BLA[channel, entrances_times[epoch] - window : entrances_times[epoch] + window]
        
        
# For vHip
pre = []
post = []
vHip_epochs = np.zeros((vHip_nchannels, window * 2, n_epochs))

for channel in range(vHip_nchannels):
    for epoch in range(n_epochs):
        vHip_epochs[channel, :, epoch] = vHip[0, entrances_times[epoch] - window : entrances_times[epoch] + window]


# In[15]:


np.save(npys_dir + 'mPFC_epochs', mPFC_epochs)
np.save(npys_dir + 'NAC_epochs', NAC_epochs)
np.save(npys_dir + 'BLA_epochs', BLA_epochs)
np.save(npys_dir + 'vHip_epochs', vHip_epochs)


# In[16]:


# Plotting mPFC
for channel in range(mPFC_nchannels):
    plt.figure(figsize=(20,10))
    for epoch in range(20):
        plt.subplot(4,5,epoch+1)
        plt.plot(mPFC_epochs[channel,:, epoch])
#         plt.show()
        
    plt.savefig(figs_dir + 'mPFC_ch' + str(channel) + '.png', dpi=150, format='png')
    

# Plotting NAC
for channel in range(NAC_nchannels):
    plt.figure(figsize=(20,10))
    for epoch in range(20):
        plt.subplot(4,5,epoch+1)
        plt.plot(NAC_epochs[channel,:, epoch])
#         plt.show()
        
    plt.savefig(figs_dir + 'NAC_ch' + str(channel) + '.png', dpi=150, format='png')
    

# Plotting BLA
for channel in range(BLA_nchannels):
    plt.figure(figsize=(20,10))
    for epoch in range(20):
        plt.subplot(4,5,epoch+1)
        plt.plot(BLA_epochs[channel,:, epoch])
#         plt.show()
        
    plt.savefig(figs_dir + 'BLA_ch' + str(channel) + '.png', dpi=150, format='png')
    

# Plotting vHip
for channel in range(vHip_nchannels):
    plt.figure(figsize=(20,10))
    for epoch in range(20):
        plt.subplot(4,5,epoch+1)
        plt.plot(vHip_epochs[channel,:, epoch])
#         plt.show()
        
    plt.savefig(figs_dir + 'vHip_ch' + str(channel) + '.png', dpi=150, format='png')
